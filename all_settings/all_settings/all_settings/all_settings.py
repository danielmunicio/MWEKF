from .Settings import Settings
from casadi import Function
import numpy as np
from numpy import pi
from typing import Union, Dict

class GlobalOptSettings(metaclass=Settings):
    """settings for CompiledGlobalOpt. All in one place, so it's always synced."""
    N: int = 100
    solver: str = 'ipopt'
    car_params: dict = {'l_r': 0.79, 'l_f':0.79, 'm': 1.}
    bbox: dict = {'l': 2.7+0.5, 'w': 1.6+0.5}
    DF_MAX: float  =  0.5
    ACC_MIN: float = -7.0
    ACC_MAX_FN: Union[float, Function] = 4.0
    DF_DOT_MAX: float =  1.0
    V_MIN: float = 0.0
    V_MAX: float = 8.0
    FRIC_MAX = 12.0 # float or function
    write_to_file = True


class LocalOptSettings(metaclass=Settings):
    """settings for LocalOpt. All in one place, so it's always synced."""
    N: int = 50 # for testing, input 10 pairs of cones to test
    solver: str = 'ipopt'
    solver_opts: Dict = {
        # set linear solver
        'ipopt.linear_solver': 'ma57',
        # expand MX expressions to SX
        'expand': True,
        # make ipopt shut up
        'ipopt.print_level': 0,
        'ipopt.sb': 'yes',
        'ipopt.ma57_automatic_scaling': 'no',
        'print_time': 0,
    }
    # car_params: dict[str:float] = {'l_r': 1.4987, 'l_f':1.5213, 'm': 1.}1.201
    car_params: dict = {'l_r': 0.79, 'l_f':0.79, 'm': 1.}
    bbox: dict = {'l': 2.7, 'w': 1.6}
    DF_MAX: float  =  0.5
    ACC_MIN: float = -5.0
    ACC_MAX_FN: Union[float, Function] = 2.0
    DF_DOT_MAX: float =  1.0
    V_MIN: float = 0.0
    V_MAX: float = 10.0
    FRIC_MAX: Union[float, Function] = 12.0
    write_to_file = False
    save_to_gif = False
    use_history = True
    filtering_method = 0
    distance_cone_order: bool = False

class FATROPSolver(metaclass=Settings):
    name = 'fatrop'
    opts = {'structure_detection': 'auto', 'expand': False, 'debug': False, 'fatrop.print_level': -1, 'print_time': False} # 'equality' key must be passed by user!
class IPOPTSolver(metaclass=Settings):
    name = 'ipopt'
    opts = {'expand': False, 'ipopt.linear_solver': 'MA27', 'print_time': False, 'ipopt.print_level': 0} # 'equality' key must be passed by user!

class RK4Solver(metaclass=Settings):
    n=1
    method='rk4'

class MidpointSolver(metaclass=Settings):
    n=3
    method='midpoint'

class MPCSettings(metaclass=Settings):
    """settings for CompiledGlobalOpt. All in one place, so it's always synced."""
    N: int = 10
    DT: float = 0.1
    L_F: float = 0.79 - 1
    L_R: float = 0.79 + 1
    V_MIN: float = 0.0
    V_MAX: float = 10.0
    A_MIN: float = -10.0
    A_MAX: float = 5.0
    DF_MIN: float = -0.5
    DF_MAX: float = 0.5
    A_DOT_MIN: float = -10.0
    A_DOT_MAX: float = 10.0
    DF_DOT_MIN: float = -1.0
    DF_DOT_MAX: float = 1.0
    Q: list = [5., 5., 0., 0., 0.]
    R: list = [0., 0.]
    RUNTIME_FREQUENCY: float = 100
    nlpsolver = FATROPSolver
    ivpsolver = MidpointSolver
    PUBLISH: bool = True



class GraphSLAMSolverSettings(metaclass=Settings):
    x0: np.ndarray = np.array([0.0, 0.0])
    initial_rows: int = int(1e4)
    initial_cols: int = int(1e4)
    local_radius: int = int(1e5)
    max_landmark_distance: float = 1.0
    dx_weight: float = 1.0
    z_weight: float = 5.0

class GraphSLAMSettings(metaclass=Settings):
    publish_to_rviz: bool = True
    local_radius: int = int(10)
    local_vision_delta: float = pi / 2 # how far into periphery of robot heading on each side to include local cones (robot has tunnel vision if this is small) (radians)
    solve_by_time: bool = True # Solve based on distance traveled otherwise
    solve_frequency: float = 0.3 # Time in seconds between solves
    solve_distance: float = 1.0 # Distance in meters between solves 
    using_wheelspeeds: bool = True

    # Simulator Based Settings
    using_simulator: bool = True
    # Whether or not to use ground truth (perfectly accurate) measurements or not 
    using_ground_truth_cones: bool = False
    using_ground_truth_wheelspeeds: bool = False # Whether or not to use the perfect wheel speeds
    bypass_SLAM = False # Bypasses SLAM Entirely, publishes ground truth position
    instant_global_map = False # Whether or not to instantly publish the global map
    # Hardware Based Settings
    forward_imu_direction: str = 'x' # Which direction is forward for the IMU. Can  be 'x', 'y', or 'z'
    NUM_LAPS: int = 3

class GraphSLAMRSSolverSettings(metaclass=Settings):
    x0: tuple[float, float] = (0.0, 0.0)
    max_landmark_distance: float = 0.5
    dx_weight: float = 1.0
    z_weight: float = 1.0
    dclip: dict = {1: 0.5, 2: 0.5, 3: 10.0} # keys are color values
    max_icp_steps: int = 0 # only used when data_association_strategy=1
    max_newton_steps: int = 0
    data_association_strategy: int = 0 # can be 1 (true ICP) or 0 (global optimization thing)


class MPC2Settings(metaclass=Settings):
    """settings for CompiledGlobalOpt. All in one place, so it's always synced."""
    N: int = 10
    DT: float = 0.1
    L_F: float = 0.76
    L_R: float = 0.76
    V_MIN: float = 0.0
    V_MAX: float = 15.0
    A_MIN: float = -3.0
    A_MAX: float = 2.0
    DF_MIN: float = -0.6
    DF_MAX: float = 0.6
    A_DOT_MIN: float = -5.0
    A_DOT_MAX: float = 5.0
    DF_DOT_MIN: float = -0.5
    DF_DOT_MAX: float =  0.5
    # Q: list[float] = [1., 1., 10., 0.1]
    Q: list = [5., 5., 0., 0., 0.]
    R: list = [10., 100.]
    # R: list[float] = [0., 0.]
    # F: list = [0., 0., 0., 0.]
    TRACK_SLACK_WEIGHT: float = 5e5
    use_rk_dynamics: bool = False
    solver: str = 'ipopt'
    PUBLISH: bool = False
class CANSettings(metaclass=Settings):
    interface: str = 'socketcan'
    channel: str = 'can0'
    bitrate: int = 1000000

class SteeringSettings(metaclass=Settings):
    CAN_SETTINGS: Settings = CANSettings
    MOTOR_TO_WHEELS_RATIO: float = 1.0 # amount motor spins/amount wheels turn
    MAX_MOTOR_POS: float = 1.35 # positive radians, furthest distance from zero (max travel/2)
    MAX_MOTOR_SPEED: float = 50.0 # positive, radians/second
    MAX_MOTOR_ACC: float = 1000.0 # positive, radians/second/second
    MOTOR_TICKS_PER_RAD: float = 18000/pi # ticks of motor encoder per radian of motor turn

class BBWSerialSettings(metaclass=Settings):
    port: str = '/dev/serial/by-id/usb-Arduino__www.arduino.cc__0043_75033303634351C041A1-if00'
    baudrate: int = 115200
    timeout: float = 0.05

class BrakingSettings(metaclass=Settings):
    SERIAL_SETTINGS: Settings = BBWSerialSettings
    VOLTS_PER_PSI: float = 0.0271494 # computed using linear regression on desmos with like 3 datapoints
    VOLTS_FOR_ZERO_PSI: float = 0.962366 # same regression ^
    VMAX: float = 4.7 # max voltage the arduino can output (at PWM duty cycle 255)


# {'f': DM(13.2383), 
#  'g': DM([4.23661e-13, -1.18128e-13, -9.72777e-13, ..., -142.39, -127.847, 13.2383]), 
#  'lam_g': DM([83.8008, -23.3907, -187.281, ..., 1.75738e-11, 1.95757e-11, -7.73818e-10]), 
#  'lam_p': DM(
# [[396.033, 1.86269, 7.25882, 0.0341408], 
#  [0.0438635, 0.000229079, 0.000739224, 3.86063e-06], 
#  [-0.33988, -0.00195327, -0.00525367, -3.01925e-05], 
#  [5.84687e-06, -1.66386e-08, 8.24677e-08, -2.34681e-10], 
#  [6.42167e-06, 2.37873e-08, 8.1956e-08, 3.03584e-10], 
#  [7.07317e-06, 6.6183e-08, 8.08557e-08, 7.56559e-10], 
#  [7.82675e-06, 1.11194e-07, 7.91414e-08, 1.12436e-09], 
#  [8.69877e-06, 1.5967e-07, 7.65818e-08, 1.4057e-09], 
#  [9.70665e-06, 2.12873e-07, 7.28771e-08, 1.59824e-09], 
#  [1.0871e-05, 2.72846e-07, 6.76671e-08, 1.69833e-09], 
#  [1.22169e-05, 3.43301e-07, 6.05189e-08, 1.70061e-09], 
#  [1.3774e-05, 4.32289e-07, 5.09047e-08, 1.59762e-09], 
#  [1.55751e-05, 5.62783e-07, 3.81699e-08, 1.37921e-09], 
#  [1.76344e-05, 8.4662e-07, 2.14922e-08, 1.03183e-09], 
#  [1084.1, 78.8271, -1.0834e-05, -7.87758e-07], 
#  [-5.12502e-08, 4.20366e-07, -1.36909e-10, 1.12296e-09], 
#  [9.06592e-12, 3.98775e-07, 2.9027e-14, 1.27679e-09], 
#  [8.94786e-12, 3.86373e-07, 3.33958e-14, 1.44205e-09], 
#  [8.94314e-12, 3.80221e-07, 3.81234e-14, 1.62083e-09], 
#  [8.93841e-12, 3.78326e-07, 4.2847e-14, 1.81354e-09], 
#  [8.93369e-12, 3.79484e-07, 4.75666e-14, 2.02053e-09], 
#  [8.92898e-12, 3.82925e-07, 5.22821e-14, 2.24215e-09], 
#  [8.92427e-12, 3.88115e-07, 5.69937e-14, 2.47865e-09], 
#  [8.91956e-12, 3.94675e-07, 6.17012e-14, 2.73017e-09], 
#  [8.80201e-12, 4.02319e-07, 6.55641e-14, 2.99678e-09], 
#  [8.91016e-12, 4.10814e-07, 7.11042e-14, 3.27835e-09], 
#  [8.61336e-08, 4.21549e-07, 7.33135e-10, 3.58806e-09], 
#  [-8.37176e-08, 1.18531e-07, -2.92096e-09, 4.13563e-09], 
#  [8.34448e-12, 1.33226e-07, 2.95718e-13, 4.72134e-09], 
#  [8.34007e-12, 1.46253e-07, 3.00132e-13, 5.26318e-09], 
#  [8.33566e-12, 1.5911e-07, 3.04544e-13, 5.81309e-09], 
#  [8.33125e-12, 1.71742e-07, 3.08951e-13, 6.36876e-09], 
#  [8.32684e-12, 1.84107e-07, 3.13355e-13, 6.92827e-09], 
#  [8.21294e-12, 1.96151e-07, 3.13574e-13, 7.48915e-09], 
#  [8.31805e-12, 2.07816e-07, 3.22151e-13, 8.04854e-09], 
#  [8.20427e-12, 2.19039e-07, 3.22247e-13, 8.6034e-09], 
#  [8.30927e-12, 2.29758e-07, 3.30932e-13, 9.15054e-09], 
#  [8.19561e-12, 2.39937e-07, 3.30905e-13, 9.68767e-09], 
#  [8.19128e-12, 2.49572e-07, 3.35229e-13, 1.02137e-08], 
#  [8.18696e-12, 2.58668e-07, 3.39549e-13, 1.07281e-08], 
#  [8.18265e-12, 2.67217e-07, 3.43865e-13, 1.12294e-08], 
#  [8.17833e-12, 2.75184e-07, 3.48178e-13, 1.17155e-08], 
#  [8.17403e-12, 2.8247e-07, 3.52487e-13, 1.21809e-08], 
#  [8.06079e-12, 2.88537e-07, 3.52035e-13, 1.26012e-08], 
#  [8.05655e-12, 2.94403e-07, 3.5628e-13, 1.30192e-08], 
#  [8.16112e-12, 2.98818e-07, 3.65393e-13, 1.33788e-08], 
#  [8.04807e-12, 2.99962e-07, 3.64758e-13, 1.3595e-08], 
#  [8.04383e-12, 2.97645e-07, 3.68992e-13, 1.36538e-08], 
#  [8.0396e-12, 2.93721e-07, 3.73222e-13, 1.36354e-08], 
#  [8.03538e-12, 2.89349e-07, 3.77449e-13, 1.35917e-08], 
#  [8.03115e-12, 2.84574e-07, 3.81672e-13, 1.35241e-08], 
#  [8.02693e-12, 2.79398e-07, 3.85891e-13, 1.34319e-08], 
#  [7.9143e-12, 2.73819e-07, 3.84835e-13, 1.33145e-08], 
#  [8.01851e-12, 2.6784e-07, 3.9432e-13, 1.31713e-08], 
#  [7.906e-12, 2.61468e-07, 3.93143e-13, 1.30021e-08], 
#  [8.01009e-12, 2.54709e-07, 4.02734e-13, 1.28063e-08], 
#  [7.8977e-12, 2.47564e-07, 4.01436e-13, 1.25836e-08], 
#  [7.89356e-12, 2.40033e-07, 4.05578e-13, 1.23331e-08], 
#  [7.88942e-12, 2.32117e-07, 4.09716e-13, 1.20544e-08], 
#  [7.88529e-12, 2.23806e-07, 4.13851e-13, 1.17462e-08], 
#  [7.88116e-12, 2.15131e-07, 4.17982e-13, 1.14096e-08], 
#  [7.76913e-12, 2.06177e-07, 4.16327e-13, 1.10485e-08], 
#  [4.75698e-08, 1.98653e-07, 2.5754e-09, 1.07549e-08], 
#  [1.38316e-08, 1.95757e-07, 7.45056e-10, 1.05447e-08], 
#  [-6.1482e-08, 2.00063e-07, -3.23477e-09, 1.0526e-08], 
#  [7.77225e-12, 1.92163e-07, 4.13203e-13, 1.02161e-08], 
#  [7.87608e-12, 1.81879e-07, 4.2306e-13, 9.76956e-09], 
#  [7.76413e-12, 1.71496e-07, 4.21324e-13, 9.3063e-09], 
#  [7.76007e-12, 1.61005e-07, 4.25379e-13, 8.8257e-09], 
#  [7.75602e-12, 1.50403e-07, 4.29431e-13, 8.32745e-09], 
#  [7.75197e-12, 1.39693e-07, 4.3348e-13, 7.81143e-09], 
#  [7.74793e-12, 1.28864e-07, 4.37525e-13, 7.27693e-09], 
#  [7.63633e-12, 1.17886e-07, 4.35434e-13, 6.72204e-09], 
#  [7.73985e-12, 1.06694e-07, 4.45606e-13, 6.14267e-09], 
#  [7.62837e-12, 9.51734e-08, 4.43396e-13, 5.53191e-09], 
#  [7.73178e-12, 8.31892e-08, 4.53673e-13, 4.88124e-09], 
#  [7.62042e-12, 7.08314e-08, 4.51344e-13, 4.19522e-09], 
#  [7.61645e-12, 5.87053e-08, 4.55313e-13, 3.50942e-09], 
#  [7.61249e-12, 4.72938e-08, 4.59279e-13, 2.85334e-09], 
#  [7.60852e-12, 3.6629e-08, 4.63242e-13, 2.23014e-09], 
#  [7.60456e-12, 2.65887e-08, 4.67201e-13, 1.63353e-09], 
#  [7.15143e-08, 2.03009e-08, 4.43313e-09, 1.25844e-09], 
#  [-7.17085e-08, 3.4188e-08, -4.24701e-09, 2.02482e-09], 
#  [7.61648e-12, 2.85868e-08, 4.55288e-13, 1.70883e-09], 
#  [7.61252e-12, 1.99634e-08, 4.59244e-13, 1.20434e-09], 
#  [7.50141e-12, 1.15937e-08, 4.56672e-13, 7.05807e-10], 
#  [7.60462e-12, 3.46358e-09, 4.67146e-13, 2.12765e-10], 
#  [7.49362e-12, -4.43072e-09, 4.64457e-13, -2.74618e-10], 
#  [7.48973e-12, -1.20829e-08, 4.68344e-13, -7.55563e-10], 
#  [7.59279e-12, -1.94768e-08, 4.78975e-13, -1.22865e-09], 
#  [7.48197e-12, -2.65853e-08, 4.76109e-13, -1.69173e-09], 
#  [7.47809e-12, -3.337e-08, 4.79987e-13, -2.14188e-09], 
#  [7.47422e-12, -3.97805e-08, 4.83862e-13, -2.57529e-09], 
#  [7.36363e-12, -4.57533e-08, 4.80765e-13, -2.98719e-09], 
#  [7.46648e-12, -5.12112e-08, 4.91601e-13, -3.3718e-09], 
#  [7.46261e-12, -5.60644e-08, 4.95466e-13, -3.72229e-09], 
#  [7.3522e-12, -6.02122e-08, 4.92195e-13, -4.03092e-09], 
#  [7.45489e-12, -6.35492e-08, 5.03186e-13, -4.28941e-09], 
#  [7.34459e-12, -6.59915e-08, 4.99798e-13, -4.49071e-09], 
#  [-1391.62, -75.54, -95.4686, -5.18221]]), 
#  'lam_x': DM([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 
#  'x': DM([0.0179989, 0.0165735, 0.0152221, 0.0139084, 0.0126016, 0.0113021, 0.0100104, 0.00872693, 0.00745201, 0.00618602, 0.00492929, 0.00368211, 0.0024447, 0.00121728, -9.9935e-09, 0.00266427, 0.00319155, 0.00371839, 0.00424478, 0.00477072, 0.00529621, 0.00582125, 0.00634584, 0.00686999, 0.00739369, 0.00791695, 0.00843976, 0.0337144, 0.0342258, 0.0347367, 0.0352473, 0.0357574, 0.0362671, 0.0367763, 0.0372851, 0.0377935, 0.0383014, 0.038809, 0.0393161, 0.0398227, 0.0403289, 0.0408348, 0.0413401, 0.0418451, 0.0423496, 0.0428537, 0.0433574, 0.0438606, 0.0443635, 0.0448659, 0.0453678, 0.0458694, 0.0463705, 0.0468712, 0.0473715, 0.0478714, 0.0483708, 0.0488699, 0.0493685, 0.0498667, 0.0503645, 0.0508618, 0.0513588, 0.0511128, 0.0499834, 0.0504801, 0.0509764, 0.0514722, 0.0519677, 0.0524627, 0.0529573, 0.0534515, 0.0539453, 0.0544387, 0.0549317, 0.0554242, 0.0559164, 0.0564081, 0.0568995, 0.0573904, 0.0578809, 0.058371, 0.0559144, 0.056405, 0.0568951, 0.0573848, 0.0578741, 0.0583629, 0.0588514, 0.0593395, 0.0598272, 0.0603145, 0.0608013, 0.0612878, 0.0617739, 0.0622595, 0.0627448, 0.0632296, 0.0637141, 0.0641982, -2.9977, -3.0043, -3.01071, -3.01712, -3.02373, -3.03053, -3.03753, -3.04473, -3.05214, -3.05977, -3.06761, -3.07567, -3.08396, -3.09248, -3.10124, -3.0905, -3.0905, -3.0905, -3.0905, -3.0905, -3.0905, -3.0905, -3.0905, -3.0905, -3.0905, -3.0905, -3.0905, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.98548, -2.9957, -3.01549, -3.01549, -3.01549, -3.01549, -3.01549, -3.01549, -3.01549, -3.01549, -3.01549, -3.01549, -3.01549, -3.01549, -3.01549, -3.01549, -3.01549, -3.01549, -3.01549, -3.01549, -3.04873, -3.04873, -3.04873, -3.04873, -3.04873, -3.04873, -3.04873, -3.04873, -3.04873, -3.04873, -3.04873, -3.04873, -3.04873, -3.04873, -3.04873, -3.04873, -3.04873, -3.04873, 2.82263, 2.7828, 2.74255, 2.70179, 2.66042, 2.61842, 2.57576, 2.53241, 2.48833, 2.44348, 2.39782, 2.3513, 2.30387, 2.25548, 2.20606, 2.09953, 2.09953, 2.09953, 2.09953, 2.09953, 2.09953, 2.09953, 2.09953, 2.09953, 2.09953, 2.09953, 2.09953, 1.89811e-07, 1.70108e-07, 1.58742e-07, 1.23821e-07, 1.13848e-07, 1.12416e-07, 9.3224e-08, 8.56068e-08, 8.13419e-08, 7.88665e-08, 7.80446e-08, 7.83011e-08, 7.89412e-08, 7.92026e-08, 7.81168e-08, 7.37668e-08, 5.88642e-08, -9.99176e-09, -1.00011e-08, -1.00018e-08, -1e-08, -1.00011e-08, -1.00025e-08, -1.00029e-08, -1.00033e-08, -1.00036e-08, -1.00039e-08, -1.0004e-08, -1.00041e-08, -1.00041e-08, -1.00041e-08, -1.00029e-08, -1.00019e-08, -9.99993e-09, -9.99104e-09, 0.000108317, 0.49527, 0.848489, 0.848489, 0.848489, 0.848489, 0.848489, 0.848489, 0.848489, 0.848489, 0.848489, 0.848489, 0.848489, 0.848489, 0.848489, 0.848489, 0.848489, 0.848489, 0.848489, 0.848489, 1.27616, 1.27616, 1.27616, 1.27616, 1.27616, 1.27616, 1.27616, 1.27616, 1.27616, 1.27616, 1.27616, 1.27616, 1.27616, 1.27616, 1.27616, 1.27616, 1.27616, 1.27616, 0.368398, 0.35844, 0.350659, 0.36085, 0.371191, 0.381691, 0.392355, 0.403193, 0.414214, 0.425426, 0.436842, 0.448471, 0.460328, 0.472426, 0.484782, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.103024, -0.259395, -0.472155, -0.474165, -0.470424, -0.46826, -0.467073, -0.466475, -0.466237, -0.466275, -0.466629, -0.467506, -0.469417, -0.473447, -0.479902, -0.492233, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.393081, -0.393081, -0.393081, -0.393081, -0.393081, -0.393081, -0.393081, -0.393081, -0.393081, -0.393081, -0.393081, -0.393081, -0.393081, -0.393081, -0.393081, -0.393081, -0.393081, -0.393081, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -7, -3.99099, -3.99027, -3.98957, -3.98894, -3.98842, -3.98801, -3.98755, -3.98712, -3.98649, -3.98559, -3.98472, -7, -6.15404, -6.14793, -6.13852, -6.12947, -6.11706, -6.10046, -6.08197, -6.06114, -6.04185, -6.02816, -6.01998, -6.01368, -6.00556, -5.99197, -5.96388, -5.85728, -5.54614, -2.0225e-11, -3.86024e-12, 3.09993e-13, -4.52308e-12, -4.78499e-12, -3.40384e-12, -3.38836e-12, -3.22039e-12, -3.10314e-12, -3.00376e-12, -2.93207e-12, -2.88967e-12, -2.81028e-12, -1.1393e-12, -1.37752e-12, 2.33414e-13, 1.51759e-11, 2.52806, 4, 4, 2.89939, 2.90223, 2.90302, 2.90344, 2.90387, 2.90432, 2.90427, 2.90279, 2.89864, 2.89025, 2.87728, 2.8707, 2.8929, 2.92941, 2.95849, 2.97836, 2.9919, 4, 2.74718, 2.75096, 2.75365, 2.75554, 2.75682, 2.75767, 2.75826, 2.75877, 2.75931, 2.75987, 2.76031, 2.76049, 2.76028, 2.75954, 2.75807, 2.75558, 2.75098, 1.1977, 1, 0.773324, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0.924268, 0.703478, 0.610279, 0.564531, 0.520038, 0.47956, 0.349625, 0.295504, 0.169809, -0.00290398, 0.0121207, 1.54099e-07, -0.450192, -0.597375, -0.762051, -0.79739, -0.830864, -0.909077, -0.916067, -0.919355, -0.916858, -0.908505, -0.898258, -0.888853, -0.882245, -0.879381, -0.879725, -0.885994, -0.863059, -0.746885, -0.5045, -0.36469, -0.00339331, 0.00548726, 0.00311791, 0.00167268, 0.00083172, 0.000327573, -5.16917e-05, -0.00048212, -0.00119319, -0.00259509, -0.00548143, -0.00971672, -0.0183008, -0.0155446, -0.000548673, -1.13059e-08, 1.5065e-06, 0.590279, 0.674807, 0.695205, 0.702052, 0.711312, 0.711678, 0.716569, 0.749448, 0.761833, 0.829001, 0.847933, 0.82219, 0.812587, 0.810531, 0.920617, 0.963395, 0.967363, 1, 0.967381, 0.967447, 0.967309, 0.967056, 0.96675, 0.966455, 0.966248, 0.966216, 0.966438, 0.966951, 0.967728, 0.968693, 0.969759, 0.970861, 0.971986, 0.973163, 0.974416, 0.589746, -0.0099581, -0.0100621, -0.0101907, -0.0103416, -0.0104994, -0.0106647, -0.0108382, -0.0110205, -0.0112126, -0.0114152, -0.0116296, -0.0118569, -0.0120984, -0.0123558, 0.0152178, -1.00106e-08, -1.00114e-08, -1.00118e-08, -1.0012e-08, -1.00122e-08, -1.00124e-08, -1.00131e-08, -1.00133e-08, -1.0014e-08, -1.0015e-08, -1.0015e-08, 0.299933, 3.20165e-09, 1.84864e-09, 5.68898e-09, 1.62702e-09, 2.34008e-10, 3.14604e-09, 1.25244e-09, 7.03643e-10, 4.09703e-10, 1.3634e-10, -4.26024e-11, -1.06442e-10, -4.35183e-11, 1.81203e-10, 7.2939e-10, 2.54428e-09, 1.24151e-08, 0.531508, 0.718373, 0.583401, 0.592224, 0.681638, 0.694068, 0.709557, 0.719618, 0.726678, 0.731205, 0.7339, 0.735444, 0.736491, 0.735104, 0.664315, 0.673787, 0.499684, 4.28499e-05, 0.123791, 0.0883047, -9.99007e-09, -9.99002e-09, -9.99001e-09, -9.99e-09, -9.98999e-09, -9.98999e-09, -9.98999e-09, -9.99e-09, -9.99005e-09, -9.99013e-09, -9.99027e-09, -9.99035e-09, -9.99011e-09, -9.98968e-09, -9.9893e-09, -9.98904e-09, -9.98887e-09, 0.106919, -9.99593e-09, -9.9959e-09, -9.99588e-09, -9.99586e-09, -9.99585e-09, -9.99585e-09, -9.99584e-09, -9.99584e-09, -9.99584e-09, -9.99583e-09, -9.99583e-09, -9.99583e-09, -9.99583e-09, -9.99583e-09, -9.99584e-09, -9.99586e-09, -9.9959e-09, 1.2912])}